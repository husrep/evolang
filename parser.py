from ai import AIModel

class Parser:
    """
    Parser class to execute EvoLang tokens.
    """
    def __init__(self):
        self.env = {}

    def execute(self, tokens):
        """
        Executes the list of tokens generated by the Lexer.
        """
        for token in tokens:
            token_type = token["type"]

            if token_type == "LOAD_MODEL":
                var_name = token["var"]
                model_name = token["model_name"]
                self.env[var_name] = AIModel(model_name)
                print(f"Model '{model_name}' loaded as '{var_name}'.")

            elif token_type == "ASSIGN_PREDICT":
                target_var = token["var"]
                model_var = token["model_var"]
                prompt = token["prompt"]
                model = self.env.get(model_var)
                if not isinstance(model, AIModel):
                    raise RuntimeError(f"Variable '{model_var}' is not a model (or not defined).")
                result = model.predict(prompt)
                self.env[target_var] = result

            elif token_type == "PREDICT":
                model_var = token["model_var"]
                prompt = token["prompt"]
                model = self.env.get(model_var)
                if not isinstance(model, AIModel):
                    raise RuntimeError(f"Variable '{model_var}' is not a model (or not defined).")
                result = model.predict(prompt)
                print(result)

            elif token_type == "PRINT_STRING":
                print(token["value"])

            elif token_type == "PRINT_VAR":
                var_name = token["var"]
                value = self.env.get(var_name)
                print(value)

            else:
                raise ValueError(f"Unknown token type: {token_type}")
